* TODO limit steps that can be taken, or at least undo step if error in output
  - sign change for example, as Josh mentioned
* TODO limit for loop other than just checking the rmsd
* TODO concurrency as much as possible, definitely in submit, probably in readout
* DONE implement Broyden's method to limit number of Jacobian calculations
* TODO determine convergence criteria
* DONE determine suitable lambda value and include in calculation
* DONE determine how to assess if a step was successful, and what to do otherwise
  - something about chi^2 in the reading I found

Jacobian
let DEi = | (ab initio Ei) - (semi empirical Ei) |
let Pj = parameter j
J = [dDEi/dPj]
J = [dDE1/dP1 ... dDE1/dPn
	...    .   ...
     dDEm/dP1 ... dDEm/dPn]
so to calculate the jacobian matrix, step each parameter Pj,
calculate the energy change in each DE, and that gives a column of J
calculate Jij by central differences:
1. calcule DEi(pj + delta), DEi(pj - delta)
2. dDEi = DEi(pj+delta) - DEi(pj-delta) / (2*delta)
delta P is given by some other delta * (1+|pj|), scale delta by the size of pj
want to use Broyden's method to avoid evaluating this jacobian all the time
	
* Ideas
** warnings if keywords are not found in input
  - Warning: keyword charge not found, assuming 0 etc
  - also add default values if I do this

		update lambda and nu:
		try step with lambda, and lambda/nu
		if neither is better, try lambda*nu^k until improves
		with k increasing on each attempt
		lambda becomes whatever is successful
		broyden update (eq 19 from lm.pdf):
		J = J + ((fBnew - fB - J*step)*step^T)/(step^T*step)
		lm.pdf says only calculate the jacobian directly on:
		- the first iteration
		-- if i == 0
		- every 2n iterations, where n is # parameters
		-- if i % 2nparam == 0
		- iterations where rmsd increases
		-- if rmsdNew > rmsd
		if fBnew "better" than before keep the step
		fmt.Printf("%v, %v, %v, %v, %v, %v\n", fB, y, jac, A, b, step)
