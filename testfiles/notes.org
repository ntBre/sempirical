* DONE read initial input files - main.inp, file07, energy.dat
* DONE write mopac input files
* DONE submit jobs
* DONE Check for job completion/failure
  - while not all jobs done, loop, check, resubmit failed ones
  - []bool running, {true true true ... true} at the start ? 
    - set to false as things finish, loop through that and check, index is n
* DONE read output - I think this is where the failed check goes
  - read .aux file if it exists, else check for "done" in output
    - if output done and no aux file then resubmit
    - may want a counter to stop after n resubmits
  - either return the energy or call submit again, return interface{}?
    - float energy or string job identifier
* TODO generate necessary matrices - abinitio-calced, params?
* TODO adjust parameters - gonum/lapack routines
* TODO update rmsd in outfile
* DONE update final params file - params.dat
* TODO loop above while difference is above some threshold
  
  
* Ideas
  - catching stdout from sbatch gives the job identifier if needed
  - probably should be using strings.TrimSpace instead of NotBlank
  - might want to change --job-name in SlurmSubmit from qff
** Make this part of the main input file:
*** dont need NPARAM, just len of param file
    - PARAMS={ like geometry
    - abstract out some of the geometry function?
    - only need the first 3 fields, struct{name, atom, value}?
    - struct param
** input geometry should be lowest energy
   - this is not the case for the example input file
   - might explain problems with running this before

** TODO warnings if keywords are not found
  - Warning: keyword charge not found, assuming 0 etc
  - also add default values if I do this
** TODO implement writer for geom for easy writing to the input files
  - also for all the other things I need to write
** +TODO maybe make coord struct so i can do input.geom.x, y, z+


* MakeMopacIn notes
inp takes care of the charge, atom labels, and method
geom takes care of the input geometry
n is the job number which will make the filename
inp.Geom.Atoms []string of atom labels
inp.Charge is int charge
inp.Method is string method
output of ReadGeoms contains the geoms
n is the index in ReadGeoms output + 1
A0 -> atomic units, ANGSTROMS -> obviously...

What ReadFile should be:
	bytes, err := ioutil.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}
	lines := string(bytes)
	split := strings.Split(lines, "\n")

* My starting code for the matrix stuff before trying lm
	energies := ReadEnergies("energy.dat")
	energyVector := mat.NewVecDense(len(energies), energies)
	emin := mat.Min(energyVector)
	for i, _ := range energies {
		energies[i] = (energies[i] - emin)*cm1
	}
	energyVector = mat.NewVecDense(len(energies), energies)
